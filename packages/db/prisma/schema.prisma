generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Ticket {
  id         String         @id @default(uuid())
  createdAt  DateTime       @default(now())
  shopDomain String
  status     String?        @default("default")
  category   String?
  priority   String?
  assigneeId String?
  fcr        Boolean        @default(false)
  fcrBy      String?
  missing    Boolean        @default(false)
  userEmail  String?
  userName   String?
  subject    String?
  displayId  Int            @unique @default(autoincrement())
  events     TicketEvents[]
  User       User[]
}

model TicketEvents {
  id             String          @id @default(uuid())
  Ticket         Ticket          @relation(fields: [ticketId], references: [id])
  ticketId       String
  type           types
  createdAt      DateTime        @default(now())
  USER_TO_AI     USER_TO_AI?
  AI_TO_USER     AI_TO_USER?
  EMAIL_RECEIVED EMAIL_RECEIVED?
  EMAIL_SENT     EMAIL_SENT?
  DISPLAY_TAG    DISPLAY_TAG[]
}

model USER_TO_AI {
  id        String       @id @default(uuid())
  event     TicketEvents @relation(fields: [id], references: [id])
  message   String
  createdAt DateTime     @default(now())
}

model AI_TO_USER {
  id         String       @id @default(uuid())
  event      TicketEvents @relation(fields: [id], references: [id])
  message    String
  unanswered Boolean      @default(false)
  createdAt  DateTime     @default(now())
}

model EMAIL_RECEIVED {
  id        String       @id @default(uuid())
  event     TicketEvents @relation(fields: [id], references: [id])
  createdAt DateTime     @default(now())
  emailId   String
  Email     Email        @relation(fields: [emailId], references: [id])
}

model EMAIL_SENT {
  id        String       @id @default(uuid())
  event     TicketEvents @relation(fields: [id], references: [id])
  createdAt DateTime     @default(now())
  emailId   String
  Email     Email        @relation(fields: [emailId], references: [id])
}

model DISPLAY_TAG {
  id        String       @id @default(uuid())
  event     TicketEvents @relation(fields: [id], references: [id])
  createdAt DateTime     @default(now())
  message   String
}

enum types {
  USER_TO_AI
  AI_TO_USER
  DISPLAY_TAG
  EMAIL_RECEIVED
  EMAIL_SENT
}

model ChatbotCustomization {
  selectedColor          String
  botName                String
  greetingMessage        String
  fontFamily             String
  fontColor              String
  widgetPosition         String
  toneAndStyle           String
  userGuidance           String
  positiveReinforcement  String
  errorHandling          String
  politeness             String
  clarityAndSimplicity   String
  personalization        String
  responseLength         String
  clarificationPrompt    String
  apologyAndRetryAttempt String
  errorMessageStyle      String
  logo                   String?
  created_at             DateTime @default(now())
  updated_at             DateTime
  logo_filename          String   @default("default")
  shopDomain             String   @id
}

model Customer {
  id         String  @id
  shopDomain String
  firstName  String
  lastName   String
  email      String
  deleted    Boolean @default(false)

  @@unique([shopDomain, email])
}

model Email {
  id             String           @id @default(uuid())
  createdAt      DateTime         @default(now())
  from           String
  subject        String
  text           String
  to             String
  EMAIL_RECEIVED EMAIL_RECEIVED[]
  EMAIL_SENT     EMAIL_SENT[]
}

model FeatureRequest {
  id          String @id @default(uuid())
  shop        String
  description String
  details     String
  category    String
}

model KnowledgeBase {
  shopDomain String     @id
  urls       Url[]
  documents  Document[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Url {
  id            Int           @id @default(autoincrement())
  url           String
  type          UrlType       @relation(fields: [urlType], references: [name])
  urlType       String
  knowledgeBase KnowledgeBase @relation(fields: [shopDomain], references: [shopDomain])
  shopDomain    String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  status        String
}

model Document {
  id            Int           @id @default(autoincrement())
  fileName      String
  fileUrl       String?
  knowledgeBase KnowledgeBase @relation(fields: [shopDomain], references: [shopDomain])
  shopDomain    String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  status        String
}

model UrlType {
  id   Int    @id @default(autoincrement())
  name String @unique
  Url  Url[]
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([isRead])
  @@index([createdAt])
}

model PlanDetails {
  planId         Int
  planStartDate  DateTime
  convleft       Int
  shopifyid      String   @default("nothing")
  eventTimestamp String   @default("default")
  shopifyDomain  String   @id
}

model RegisteredWebhooks {
  id          String   @id @default(uuid())
  address     String
  topic       String
  created_at  DateTime
  updated_at  DateTime
  shop_domain String
}

model ShopifyInstalledShop {
  id               String   @id @default(uuid())
  shop             String   @unique
  accessToken      String?
  adminInviteCode  String   @default(uuid())
  memberInviteCode String   @default(uuid())
  email            String[]
  autoAssignment   Boolean  @default(true)
}

model User {
  id                   String         @id @default(uuid())
  email                String         @unique
  firstName            String?
  lastName             String?
  lastLoginAt          DateTime?
  shopDomain           String?
  image                String?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime?
  role                 String?
  emailVerified        DateTime?
  currentActiveTickets Int            @default(0)
  unavailableTill      DateTime       @default(now())
  available            Boolean        @default(true)
  lastNotifiedAt       DateTime       @default(now())
  notifications        Notification[]
  ticketId             String?
  Ticket               Ticket?        @relation(fields: [ticketId], references: [id])
}
