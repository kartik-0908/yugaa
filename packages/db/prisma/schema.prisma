generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Ticket {
  id         String         @id @default(uuid())
  createdAt  DateTime       @default(now())
  shopDomain String
  status     String?        @default("Unassigned")
  category   String?
  priority   String?
  assigneeId String?
  fcr        Boolean        @default(false)
  fcrBy      String?
  missing    Boolean        @default(false)
  events     TicketEvents[]
  User       User[]
}

model TicketEvents {
  id                String             @id @default(uuid())
  Ticket            Ticket             @relation(fields: [ticketId], references: [id])
  ticketId          String
  type              types
  createdAt         DateTime           @default(now())
  AI_TICKET_CREATED AI_TICKET_CREATED?
  USER_TO_AI        USER_TO_AI?
  AI_TO_USER        AI_TO_USER?
  DISPLAY_PROD      DISPLAY_PROD?
  DISPLAY_INPUT     DISPLAY_INPUT?
  EMAIL_RECEIVED    EMAIL_RECEIVED?
  EMAIL_SENT        EMAIL_SENT?
  STATUS_CHANGED    STATUS_CHANGED?
  PRIORITY_CHANGED  PRIORITY_CHANGED?
  CATEGORY_CHANGED  CATEGORY_CHANGED?
  ASSIGNE_CHANGED   ASSIGNE_CHANGED?
  REOPENED          REOPENED?
  ESCALATED         ESCALATED?
}

model AI_TICKET_CREATED {
  id        String       @id @default(uuid())
  event     TicketEvents @relation(fields: [id], references: [id])
  ticketId  String
  createdAt DateTime     @default(now())
}

model USER_TO_AI {
  id        String       @id @default(uuid())
  event     TicketEvents @relation(fields: [id], references: [id])
  message   String
  createdAt DateTime     @default(now())
}

model AI_TO_USER {
  id         String       @id @default(uuid())
  event      TicketEvents @relation(fields: [id], references: [id])
  message    String
  unanswered Boolean      @default(false)
  createdAt  DateTime     @default(now())
}

model DISPLAY_PROD {
  id          String       @id @default(uuid())
  event       TicketEvents @relation(fields: [id], references: [id])
  crereatedAt DateTime     @default(now())
  metadata    Json
}

model DISPLAY_INPUT {
  id        String       @id @default(uuid())
  event     TicketEvents @relation(fields: [id], references: [id])
  createdAt DateTime     @default(now())
  metadata  Json
}

model EMAIL_RECEIVED {
  id        String       @id @default(uuid())
  event     TicketEvents @relation(fields: [id], references: [id])
  createdAt DateTime     @default(now())
  emailId   String
  Email     Email        @relation(fields: [emailId], references: [id])
}

model EMAIL_SENT {
  id        String       @id @default(uuid())
  event     TicketEvents @relation(fields: [id], references: [id])
  createdAt DateTime     @default(now())
  emailId   String
  Email     Email        @relation(fields: [emailId], references: [id])
}

model STATUS_CHANGED {
  id        String       @id @default(uuid())
  event     TicketEvents @relation(fields: [id], references: [id])
  newStatus String
  oldStatus String?
  byid      String?
  by        User?        @relation(fields: [byid], references: [id])
  createdAt DateTime     @default(now())
}

model PRIORITY_CHANGED {
  id          String       @id @default(uuid())
  event       TicketEvents @relation(fields: [id], references: [id])
  newpriority String
  oldpriority String?
  byid        String?
  by          User?        @relation(fields: [byid], references: [id])
  createdAt   DateTime     @default(now())
}

model CATEGORY_CHANGED {
  id          String       @id @default(uuid())
  event       TicketEvents @relation(fields: [id], references: [id])
  newcategory String
  oldcategory String?
  byid        String?
  by          User?        @relation(fields: [byid], references: [id])
  createdAt   DateTime     @default(now())
}

model ASSIGNE_CHANGED {
  id        String       @id @default(uuid())
  createdAt DateTime     @default(now())
  event     TicketEvents @relation(fields: [id], references: [id])
  byid      String
  by        User         @relation("ChangedBy", fields: [byid], references: [id])
  newid     String
  new       User         @relation("newAssignee", fields: [newid], references: [id])
  oldid     String?
  old       User?        @relation("oldAssignee", fields: [oldid], references: [id])
}

model REOPENED {
  id        String       @id @default(uuid())
  createdAt DateTime     @default(now())
  event     TicketEvents @relation(fields: [id], references: [id])
  byid      String?
  by        User?        @relation(fields: [byid], references: [id])
}

model ESCALATED {
  id        String       @id @default(uuid())
  createdAt DateTime     @default(now())
  userEmail String
  name      String
  category  String
  subject   String       @default("escalated")
  event     TicketEvents @relation(fields: [id], references: [id])
}

enum types {
  AI_TICKET_CREATED
  USER_TO_AI
  AI_TO_USER
  DISPLAY_PROD
  DISPLAY_INPUT
  EMAIL_RECEIVED
  EMAIL_SENT
  STATUS_CHANGED
  PRIORITY_CHANGED
  CATEGORY_CHANGED
  ASSIGNE_CHANGED
  REOPENED
  ESCALATED
}

model ChatbotCustomization {
  selectedColor          String
  botName                String
  greetingMessage        String
  fontFamily             String
  fontColor              String
  widgetPosition         String
  toneAndStyle           String
  userGuidance           String
  positiveReinforcement  String
  errorHandling          String
  politeness             String
  clarityAndSimplicity   String
  personalization        String
  responseLength         String
  clarificationPrompt    String
  apologyAndRetryAttempt String
  errorMessageStyle      String
  logo                   String?
  created_at             DateTime @default(now())
  updated_at             DateTime
  logo_filename          String   @default("default")
  shopDomain             String   @id
}

model Customer {
  id         String  @id
  shopDomain String
  firstName  String
  lastName   String
  email      String
  deleted    Boolean @default(false)

  @@unique([shopDomain, email])
}

model Email {
  id             String           @id @default(uuid())
  createdAt      DateTime         @default(now())
  from           String
  subject        String
  text           String
  to             String
  EMAIL_RECEIVED EMAIL_RECEIVED[]
  EMAIL_SENT     EMAIL_SENT[]
}

model FeatureRequest {
  id          String @id @default(uuid())
  shop        String
  description String
  details     String
  category    String
}

model KnowledgeBase {
  shopDomain String     @id
  urls       Url[]
  documents  Document[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Url {
  id            Int           @id @default(autoincrement())
  url           String
  type          UrlType       @relation(fields: [urlType], references: [name])
  urlType       String
  knowledgeBase KnowledgeBase @relation(fields: [shopDomain], references: [shopDomain])
  shopDomain    String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  status        String
}

model Document {
  id             Int           @id @default(autoincrement())
  fileName       String
  fileType       DocumentType  @relation(fields: [documentTypeId], references: [id])
  documentTypeId Int
  fileUrl        String
  knowledgeBase  KnowledgeBase @relation(fields: [shopDomain], references: [shopDomain])
  shopDomain     String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  status         String
}

model UrlType {
  id   Int    @id @default(autoincrement())
  name String @unique
  Url  Url[]
}

model DocumentType {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  documents Document[]
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([isRead])
  @@index([createdAt])
}

model PlanDetails {
  planId         Int
  planStartDate  DateTime
  convleft       Int
  shopifyid      String   @default("nothing")
  eventTimestamp String   @default("default")
  shopifyDomain  String   @id
}

model RegisteredWebhooks {
  id          String   @id @default(uuid())
  address     String
  topic       String
  created_at  DateTime
  updated_at  DateTime
  shop_domain String
}

model ShopifyInstalledShop {
  id               String   @id @default(uuid())
  shop             String   @unique
  accessToken      String?
  adminInviteCode  String   @default(uuid())
  memberInviteCode String   @default(uuid())
  email            String[]
  autoAssignment   Boolean  @default(true)
}

model User {
  id                   String             @id @default(uuid())
  email                String             @unique
  firstName            String?
  lastName             String?
  lastLoginAt          DateTime?
  shopDomain           String?
  image                String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime?
  role                 String?
  emailVerified        DateTime?
  currentActiveTickets Int                @default(0)
  unavailableTill      DateTime           @default(now())
  availabe             Boolean            @default(true)
  lastNotifiedAt       DateTime           @default(now())
  notifications        Notification[]
  STATUS_CHANGED       STATUS_CHANGED[]
  PRIORITY_CHANGED     PRIORITY_CHANGED[]
  CATEGORY_CHANGED     CATEGORY_CHANGED[]
  assigneeChangesby    ASSIGNE_CHANGED[]  @relation("ChangedBy")
  REOPENED             REOPENED[]
  assigneeChangedNew   ASSIGNE_CHANGED[]  @relation("newAssignee")
  oldassignee          ASSIGNE_CHANGED[]  @relation("oldAssignee")
  Ticket               Ticket?            @relation(fields: [ticketId], references: [id])
  ticketId             String?
}
